//
//  ContentView.swift
//  ViewsAndModifiers
//
//  Created by Alexandr Rodionov on 3.05.23.
//

import SwiftUI

struct ContentView: View {
    
    @State private var allMoves = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]
    @State private var computerMove = ""
    @State private var computerScore = 0
    @State private var playerScore = 0
    @State private var gameOver = false
    @State private var moveTitle = "–ù–∞—á–Ω–µ–º?"
    
    var body: some View {
        NavigationStack {
            GeometryReader { geometry in
                VStack {
                    Spacer()
                    HStack {
                        Text("–ö–æ–º–ø—å—é—Ç–µ—Ä")
                            .frame(width: geometry.size.width / 2, height: 50, alignment: .center)
                            .font(.title)
                            .foregroundColor(.white)
                        Text("–ò–≥—Ä–æ–∫")
                            .frame(width: geometry.size.width / 2, height: 50, alignment: .center)
                            .font(.title)
                            .foregroundColor(.white)
                    }
                    HStack {
                        Text("\(computerScore)")
                            .font(.system(size: 50))
                            .frame(width: geometry.size.width / 2, height: 50, alignment: .center)
                            .foregroundColor(.white)
                        Text("\(playerScore)")
                            .font(.system(size: 50))
                            .frame(width: geometry.size.width / 2, height: 50, alignment: .center)
                            .foregroundColor(.white)
                    }
                    Spacer()
                    Text(moveTitle)
                        .font(.largeTitle)
                        .foregroundColor(.white)
                    Spacer()
                    HStack {
                        if computerMove == "–ö–∞–º–µ–Ω—å" {
                            Text("ü™®")
                                .font(.system(size: 100))
                        } else if computerMove == "–ù–æ–∂–Ω–∏—Ü—ã" {
                            Text("‚úÇÔ∏è")
                                .font(.system(size: 100))
                        } else if computerMove == "–ë—É–º–∞–≥–∞" {
                            Text("üìÑ")
                                .font(.system(size: 100))
                        } else {
                            Text("‚ÅâÔ∏è")
                                .font(.system(size: 100))
                        }
                    }
                    Spacer()
                    HStack(spacing: 30) {
                        Button {
                            playerTapButton("–ö–∞–º–µ–Ω—å")
                        } label: {
                            Text("ü™®")
                                .font(.system(size: geometry.size.width / 4))
                        }
                        Button {
                            playerTapButton("–ù–æ–∂–Ω–∏—Ü—ã")
                        } label: {
                            Text("‚úÇÔ∏è")
                                .font(.system(size: geometry.size.width / 4))
                        }
                        
                        Button {
                            playerTapButton("–ë—É–º–∞–≥–∞")
                        } label: {
                            Text("üìÑ")
                                .font(.system(size: geometry.size.width / 4))
                        }
                    }
                    Spacer()
                }
                .navigationTitle("–ò–≥—Ä–∞: –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞.")
                .navigationBarTitleDisplayMode(.inline)
                .alert("–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã!", isPresented: $gameOver) {
                    Button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ") {
                        computerScore = 0
                        playerScore = 0
                        gameOver = false
                        moveTitle = "–ù–∞—á–Ω–µ–º?"
                    }
                } message: {
                    if computerScore > playerScore {
                        Text("Skynet –ø–æ–±–µ–¥–∏–ª!")
                    } else {
                        Text("–ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏–ª–æ!")
                    }
                }
            }
            .background {
                LinearGradient(colors: [.red, .black], startPoint: .top, endPoint: .bottom)
            }
            .ignoresSafeArea()
        }
    }
    
    func playerTapButton(_ move: String) {
        computerMove = allMoves.randomElement() ?? ""
        
        switch move {
        case "–ö–∞–º–µ–Ω—å":
            if computerMove == move {
                moveTitle = "–û–¥–∏–Ω–∞–∫–æ–≤–æ"
            } else {
                checkAnswer("–ë—É–º–∞–≥–∞")
            }
        case "–ù–æ–∂–Ω–∏—Ü—ã":
            if computerMove == move {
                moveTitle = "–û–¥–∏–Ω–∞–∫–æ–≤–æ"
            } else {
                checkAnswer("–ö–∞–º–µ–Ω—å")
            }
        default: if computerMove == move {
            moveTitle = "–û–¥–∏–Ω–∞–∫–æ–≤–æ"
        } else {
            checkAnswer("–ù–æ–∂–Ω–∏—Ü—ã")
        }
        }
        if computerScore == 10 || playerScore == 10 {
            gameOver = true
        }
    }
    
    func checkAnswer(_ variant: String) {
        if computerMove == variant {
            computerScore += 1
            moveTitle = "+1 Skynet"
        } else {
            playerScore += 1
            moveTitle = "+1 –ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤—É"
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
